theme(axis.text.x = element_text(angle=45, hjust = 1))
View(frug_trait_melt)
ggplot() +
geom_sf(data = Data_availability_sf, aes(fill = 'Percentage'), color = "white", size = 0.5) +
scale_fill_gradientn(colors = c("lightblue", "darkblue"), na.value = "grey", limits = c(0, 100)) +
theme_minimal()
ggplot() +
geom_sf(data = Data_availability_sf, aes(fill = 'Percentage'), color = "white", size = 0.5) +
scale_fill_manual(values = c("lightblue", "darkblue")) +
theme_minimal()
View(Data_availability_sf)
class(Data_availability_sf$Percentage)
ggplot() +
geom_sf(data = Data_availability_sf, aes(fill = 'Percentage'), color = "white", size = 0.5) +
scale_fill_manual(values = c("lightblue", "darkblue")) +
theme_minimal()
ggplot() +
geom_sf(data = Data_availability_sf, aes(fill = 'Percentage'), color = "white", size = 0.5) +
scale_fill_gradient(values = c("lightblue", "darkblue")) +
theme_minimal()
ggplot() +
geom_sf(data = Data_availability_sf, aes(fill = 'Percentage'), color = "white", size = 0.5) +
scale_fill_gradient(values = c("lightblue", "darkblue")) +
theme_minimal()
ggplot() +
geom_sf(data = Data_availability_sf, aes(fill = 'Percentage'), color = "white", size = 0.5) +
scale_fill_gradient(low = "lightblue", high = "darkblue") +
theme_minimal()
rlang::last_trace()
ggplot() +
geom_sf(data = Data_availability_sf, aes(fill = 'Percentage'), color = "white", size = 0.5)
ggplot() +
geom_sf(data = Data_availability_sf, aes(fill = Percentage), color = "white", size = 0.5)
ggplot() +
geom_sf(data = Data_availability_sf, aes(fill = Percentage), color = "white", size = 0.5) +
scale_fill_gradient(low = "lightblue", high = "darkblue") +
theme_minimal()
ggplot() +
geom_sf(data = Data_availability_sf, aes(fill = Percentage), color = "white", size = 0.5) +
scale_fill_gradient(low = "lightblue", high = "violet") +
theme_minimal()
ggplot() +
geom_sf(data = Data_availability_sf, aes(fill = Percentage), color = "white", size = 0.5) +
scale_fill_gradient(low = "lightblue", high = "purple") +
theme_minimal()
ggplot() +
geom_sf(data = Data_availability_sf, aes(fill = Percentage), color = "white", size = 0.5) +
scale_fill_gradient2(low = "blue",mid = 'purple', high = "yellow") +
theme_minimal()
ggplot() +
geom_sf(data = Data_availability_sf, aes(fill = Percentage), color = "white", size = 0.5) +
scale_fill_gradient2(low = "blue",mid = 'purple', high = "yellow",midpoint = 0.5) +
theme_minimal()
ggplot() +
geom_sf(data = Data_availability_sf, aes(fill = Percentage), color = "white", size = 0.5) +
scale_fill_gradient2(low = "blue",mid = 'purple', high = "yellow",midpoint = 0.5)
ggplot() +
geom_sf(data = Data_availability_sf, aes(fill = Percentage), color = "white", size = 0.5) +
scale_fill_gradient2(low = "blue",mid = 'purple', high = "yellow",midpoint = 0.75)
View(Bird_data_BC)
View(no_birdtrait_byBC)
View(frug_birds)
View(match_birdtrait_byBC)
View(match_birdtrait)
View(match_birdtrait_byBC)
View(frug_birds)
View(match_birdtrait)
View(match_birdtrait_byBC)
###Frugivore species richness###
matched_frug=semi_join(match_birdtrait,frug_birds, by=c('SpecName'='Species1'))
View(matched_frug)
match_frug_byBC <- acast(data=matched_frug,
formula = LEVEL_3_CO ~ SpecName,
fun.aggregate = length,
value.var = 'SpecName')
View(match_frug_byBC)
View(frug_birds)
###Frugivore species richness###
match_frug_byBC <- match_birdtrait_byBC[c(row.names(match_birdtrait_byBC),frug_birds$Species1)]
match_frug_byBC
row.names(match_birdtrait_byBC)
View(match_birdtrait_byBC)
###Frugivore species richness###
match_frug_byBC <- match_birdtrait_byBC[c(row.names(match_birdtrait_byBC),frug_birds$Species1),]
###Frugivore species richness###
match_frug_byBC <- match_birdtrait_byBC[c(row.names(match_birdtrait_byBC),frug_birds$Species1)]
View(frug_birds)
###Frugivore species richness###
match_frug_byBC <- match_birdtrait_byBC[c(frug_birds$Species1),]
###Frugivore species richness###
match_frug_byBC <- match_birdtrait_byBC[c(frug_birds$Species1)]
frug_birds$Species1
match_birdtrait_byBC[c(frug_birds$Species1)]
match_birdtrait_byBC
match_birdtrait_byBC['Anorrhinus tickelli']
match_birdtrait_byBC[c('Anorrhinus tickelli')]
match_birdtrait_byBC$'Anorrhinus tickelli'
match_birdtrait_byBC$`Anorrhinus tickelli`
###Frugivore species richness###
match_frug_byBC <- match_birdtrait_byBC[,c(row.names(match_birdtrait_byBC),frug_birds$Species1)]
###Frugivore species richness###
match_frug_byBC <- match_birdtrait_byBC[,frug_birds$Species1),drop=F]
###Frugivore species richness###
match_frug_byBC <- match_birdtrait_byBC[,frug_birds$Species1,drop=F]
match_birdtrait_byBC[,'Aceros nipalensis']
###Frugivore species richness###
match_frug_byBC <- match_birdtrait_byBC[,c(frug_birds$Species1)]
match_birdtrait_byBC[,c('Aceros nipalensis','Anorrhinus tickelli')]
###Frugivore species richness###
match_frug <- intersect(frug_birds$Species1,colnames(match_birdtrait_byBC))
match_frug_byBC <- match_birdtrait_byBC[,c(match_frug)]
View(match_frug_byBC)
Bird_data_BC$Frugivore=rowSums(match_frug_byBC)
View(Bird_data_BC)
Bird_data_BC$`Density_Frug` = Bird_data_BC$Frugivore/Bird_data_BC$areas
Bird_data_BC[c('areacode','Density_Frug')]
options("scipen"=100, "digits"=4)
Bird_data_BC[c('areacode','Density_Frug')]
plot(Bird_data_BC$Density_Frug)
Bird_data_BC['SCS',]
summary(Bird_data_BC$areas)
Bird_data_BC$areas
Bird_data_BC$`Density_Frug` = (Bird_data_BC$Frugivore/(Bird_data_BC$areas*1000000))*1000000
Bird_data_BC$Density_Frug
Bird_data_BC$`Density_Frug` = Bird_data_BC$Frugivore/(Bird_data_BC$areas
Bird_data_BC$`Density_Frug` = Bird_data_BC$Frugivore/Bird_data_BC$areas
Bird_data_BC$`Density_Frug` = Bird_data_BC$Frugivore/Bird_data_BC$areas
plot(st_geometry(Bird_data_BC))
plot(Bird_data_BC)
plot(st_as_sf(Bird_data_BC))
Annual_mean_temp <- rast('Data/wc2.1_10m_bio/wc2.1_10m_bio_1.tif')
library(sf)
library(terra)
library(ggplot2)
install.packages('geodata')
library(geodata)
worldclim_global()
worldclim_global(var='bio',res = 10)
#####################
#Bioclimatic variables 1-19 https://www.worldclim.org/data/bioclim.html
x <- geodata::worldclim_global(var = "bio", res = 10, path = "C:\_Documents\GitHub\UROPsBirdDiversity\Birds R\Data")
#####################
#Bioclimatic variables 1-19 https://www.worldclim.org/data/bioclim.html
x <- geodata::worldclim_global(var = "bio", res = 10, path = "~\_Documents\GitHub\UROPsBirdDiversity\Birds R\Data")
geodata_path(C:\_Documents\GitHub\UROPsBirdDiversity\Birds R\Data)
geodata_path()
#####################
#Bioclimatic variables 1-19 https://www.worldclim.org/data/bioclim.html
x <- geodata::worldclim_global(var = "bio", res = 10, path = "WorldClimData")
#####################
#Bioclimatic variables 1-19 https://www.worldclim.org/data/bioclim.html
Data_WorldClim <- geodata::worldclim_global(var = "bio", res = 10, path = "WorldClimData")
View(Data_WorldClim)
names(Data_WorldClim)
Data_WorldClim
?paste0()
?names()
Data_WorldClim(bio)
paste0(1:12)
Extracted_WorldClim <- Data_WorldClim[[c("bio1", "bio4", "bio12", "bio15")]]
names(Data_WorldClim) <- paste0("bio", 1:19)
Extracted_WorldClim <- Data_WorldClim[[c("bio1", "bio4", "bio12", "bio15")]]
?reshape2::
#####################
#Bioclimatic variables 1-19 https://www.worldclim.org/data/bioclim.html
Data_WorldClim <- geodata::worldclim_global(var = "bio", res = 10, path = "Data\WorldClimData")
#####################
#Bioclimatic variables 1-19 https://www.worldclim.org/data/bioclim.html
Data_WorldClim <- geodata::worldclim_global(var = "bio", res = 10, path = "Data/WorldClimData")
bot_countries <- st_read("Data/lvl3/level3.shp")
library(terra)
clim_mean <- terra::extract(x = Extracted_WorldClim, y = bot_countries, fun = mean, na.rm = TRUE)
bot_countries <- st_read("Data/lvl3/level3.shp")
Data_WorldClim <- geodata::worldclim_global(var = "bio", res = 10, path = "Data/WorldClimData")
names(Data_WorldClim) <- paste0("bio", 1:19)
Extracted_WorldClim <- Data_WorldClim[[c("bio1", "bio4", "bio12", "bio15")]]
clim_mean <- terra::extract(x = Extracted_WorldClim, y = bot_countries, fun = mean, na.rm = TRUE)
View(clim_mean)
clim_mean <- clim_mean[-1,]
clim_mean <- terra::extract(x = Extracted_WorldClim, y = bot_countries, fun = mean, na.rm = TRUE)
clim_mean <- clim_mean[,-1]
View(bot_countries)
View(bot_countries)
clim_mean_df <- cbind(bot_countries$LEVEL3_COD,clim_mean,bot_countries$geometry)
summary(clim_mean_df)
ggplot(data = clim_mean_df) +
geom_raster(aes(x = x,
y = y,
fill = bio1))
ggplot(data = clim_mean_df) +
geom_raster(aes(fill = bio1))
ggplot(data = clim_mean_df) +
geom_sf(aes(fill = bio1))
install.packages('tiddyterra')
install.packages('tidyterra')
library(tidyterra)
clim_mean_df <- tidyterra::fortify(clim_mean_df)
ggplot(data = clim_mean_df) +
geom_sf(aes(fill = bio1))
clim_mean_df <- st_as_sf(clim_mean_df)
ggplot(data = clim_mean_df) +
geom_sf(aes(fill = bio1))
ggplot(data = clim_mean_df) +
geom_sf(aes(fill = bio1)) +
scale_fill_gradient(low = 'blue',high = 'red')
traits_data <- read_excel("Data/Birds Data/Bird_traits_cleaned.xlsx",
sheet = "AVONET1_BirdLife")
#Libraries imported
library(readxl)
traits_data <- read_excel("Data/Birds Data/Bird_traits_cleaned.xlsx",
sheet = "AVONET1_BirdLife")
traits_data=traits_data[,-1]
frug_birds <- traits_data[traits_data$Trophic.Niche=='Frugivore',]
#Removed non-measurement related categories from Avonet1_Birdlife data
raw_bird_geog <- read.table("Data/Birds Data/Occurrences_GlobalBirds_TDWG.txt", header=T,sep="")
library(sf)
library(terra)
library(ggplot2)
library(geodata)
library(tidyterra)
bot_countries <- st_read("Data/lvl3/level3.shp")
Data_WorldClim <- geodata::worldclim_global(var = "bio", res = 10, path = "Data/WorldClimData")
names(Data_WorldClim) <- paste0("bio", 1:19)
Extracted_WorldClim <- Data_WorldClim[[c("bio1", "bio4", "bio12", "bio15")]]
clim_mean <- terra::extract(x = Extracted_WorldClim, y = bot_countries, fun = mean, na.rm = TRUE)
clim_mean <- clim_mean[,-1]
clim_mean_df <- cbind(bot_countries$LEVEL3_COD,clim_mean,bot_countries$geometry)
clim_mean_df <- st_as_sf(clim_mean_df)
ggplot(data = clim_mean_df) +
geom_sf(aes(fill = bio1)) +
scale_fill_gradient(low = 'blue',high = 'red')
###########################################################################
ggplot(data = clim_mean_df) +
geom_sf(aes(fill = bio2)) +
scale_fill_gradient(low = 'blue',high = 'red')
###########################################################################
ggplot(data = clim_mean_df) +
geom_sf(aes(fill = bio4)) +
scale_fill_gradient(low = 'blue',high = 'red')
###########################################################################
ggplot(data = clim_mean_df) +
geom_sf(aes(fill = bio12)) +
scale_fill_gradient(low = 'blue',high = 'red')
View(clim_mean_df)
###########################################################################
ggplot(data = clim_mean_df) +
geom_sf(aes(fill = bio15)) +
scale_fill_gradient(low = 'blue',high = 'red')
library(readxl)
library(ggplot2)
library(reshape2)
library(readr)
library(dplyr)
library(FD)
library(rWCVP)
library(terra)
library(sf)
fruitplant_families <- read.csv('Data/Plant Data/Fruitplant_families.csv')
View(fruitplant_families)
fruitplant_families <- read.csv('Data/Plant Data/Fruitplant_families.csv')
View(fruitplant_families)
extract_fpfam <- fruitplant_families[,2:7]
View(extract_fpfam)
extract_fpfam <- fruitplant_families[,c(2,4)]
View(extract_fpfam)
extract_fpfam <- fruitplant_families[,2]
library(rWCVP)
?wcvp_match_names()
wcvp_match_names(fruitplant_families)
install.packages('rWCVPdata')
library(rWCVPdata)
if (!require(rWCVPdata)) {
install.packages("rWCVPdata",
repos = c(
"https://matildabrown.github.io/drat",
"https://cloud.r-project.org"
)
)
}
# taxonomy data
names <- rWCVPdata::wcvp_names
View(names)
# distribution data
distributions <- rWCVPdata::wcvp_distributions
wcvp_match_names(fruitplant_families)
wcvp_match_names(fruitplant_families,name_col = 'Confirmed.names')
View(names)
summary(names$family)
names$familyFac <- as.factor(names$family)
levels(names$familyFac)
library(dplyr)
semi_join(levels(names$family),fruitplant_families$Confirmed.names
check=semi_join(levels(names$family),fruitplant_families$Confirmed.names
check=semi_join(levels(names$family),fruitplant_families$Confirmed.names)
check=semi_join(names,fruitplant_families, by = c('family','Confirmed.names'))
rlang::last_trace()
check=semi_join(names,fruitplant_families, by = c('family'='Confirmed.names'))
View(check)
familycheck<-as.factor(check$family)
View(fruitplant_families)
check2<-anti_join(check,fruitplant_families,by=c('family'))
View(check2)
check2$checkfamily=as.factor(check2$family)
names(check2$checkfamily)
levels(check2$checkfamily)
check2<-anti_join(check,fruitplant_families,by=c('family'='Confirmed.names'))
View(check)
check=semi_join(fruitplant_families,names by = c('Confirmed.names'='family'))
check=semi_join(fruitplant_families,names, by = c('Confirmed.names'='family'))
View(check)
# taxonomy data
names <- rWCVPdata::wcvp_names #required!
###Checked that 80 family names correspond to rWCVP data###
fruitplants <- semi_join(names,fruitplant_families, by = c('family'='Confirmed.names'))
View(fruitplants)
View(distributions)
View(fruitplants)
View(fruitplant_families)
wcvp_summary('Amaryllidaceae', taxon_rank = 'family')
wcvp_summary_gt(wcvp_summary('Amaryllidaceae', taxon_rank = 'family'))
wcvp_summary_gt(wcvp_summary(c('Amaryllidaceae','
Anacardiaceae'), taxon_rank = 'family'))
test=wcvp_summary('Amaryllidaceae', taxon_rank = 'family')
View(test)
#TODO: create a function that outputs total native & endemic species by BC in a list
test=data.frame(wcvp_summary('Amaryllidaceae', taxon_rank = 'family'))
View(fruitplants)
View(fruitplant_families)
#TODO: create a function that outputs total native & endemic species by BC in a list
test=data.frame(wcvp_summary(c('Amaryllidaceae','Anacardiaceae'), taxon_rank = 'family'))
View(test)
#TODO: create a function that outputs total native & endemic species by BC in a list
test=data.frame(wcvp_summary(c('Amaryllidaceae','Anacardiaceae'), taxon_rank = 'family'))
#TODO: create a function that outputs total native & endemic species by BC in a list
test=data.frame(wcvp_occ_mat(taxon=c('Amaryllidaceae','Anacardiaceae'), taxon_rank = 'family'))
#TODO: create a function that outputs total native & endemic species by BC in a list
test=data.frame(wcvp_occ_mat('Amaryllidaceae', taxon_rank = 'family'))
View(test)
col(test)
#TODO: append all 80 family
test=data.frame(wcvp_occ_mat('Amaryllidaceae', taxon_rank = 'family'),introduced=F,extinct=F)
View(test)
View(bot_countries)
col.names(test)
distributions$area_fac=as.factor(distributions$area_code_l3)
levels(distributions$area_fac)
View(distributions)
which(distributions$location_doubtful==1)
distributions[1430,]
which(distributions$area_code_l3=='')
which(distributions$area_code_l3==' ')
distributions[472067,]
i
levels(distributions$area_fac)
bot_countries$LEVEL3_COD
install.packages("rWCVPdata", repos = c
("https://matildabrown.github.io/drat","https://cloud.r-project.org"))
install.packages("rWCVPdata", repos = c
("https://matildabrown.github.io/drat","https://cloud.r-project.org"))
# taxonomy data
names <- rWCVPdata::wcvp_names #required!
# distribution data
distributions <- rWCVPdata::wcvp_distributions #required!
#TODO: append all 80 family
test=data.frame(wcvp_occ_mat('Amaryllidaceae', taxon_rank = 'family'),introduced=F,extinct=F)
library(rWCVP)
library(rWCVPdata)
library(dplyr)
#TODO: append all 80 family
test=data.frame(wcvp_occ_mat('Amaryllidaceae', taxon_rank = 'family'),introduced=F,extinct=F)
View(test)
colnames(test)
library(rWCVP)
library(rWCVPdata)
library(dplyr)
library(writexl)
library(readxl)
# taxonomy data
names <- rWCVPdata::wcvp_names #required!
# distribution data
distributions <- rWCVPdata::wcvp_distributions #required!
fruitplant_families <- read.csv('Data/Plant Data/Fruitplant_families.csv')
#TODO: append all 80 family
fruit_distri=data.frame(wcvp_occ_mat('Amaryllidaceae', taxon_rank = 'family'),introduced=F,extinct=F)
for (i in fruitplant_families$Confirmed.names){
if (i == 'Amaryllidaceae'){
next
}
list_in <- data.frame(wcvp_occ_mat(i, taxon_rank = 'family'),introduced=F,extinct=F)
fruit_distri <- rbind(fruit_distri,list_in)
}
fruit_distri_copy <- fruit_distri[,-c(1,372,373)]
fruit_distri_df <- t(fruit_distri_copy)
View(fruit_distri)
View(fruit_distri_copy)
fruit_distri_df <- t(fruit_distri_copy)
fruit_distri_df_copy <-fruit_distri
fruit_distri_df_header <- fruit_distri_df[1.]
fruit_distri_df_header <- fruit_distri_df[1,]
colnames(fruit_distri_df) <- fruit_distri_df_header
View(fruit_distri_df)
fruit_distri_df <- fruit_distri_df [-1,]
library(readxl)
library(ggplot2)
library(reshape2)
library(readr)
library(dplyr)
library(FD)
library(rWCVP)
library(terra)
library(sf)
#Bird_data_BC stores values of interest
########################################################################
bot_countries <- st_read("Data/lvl3/level3.shp")
traits_data <- read_excel("Data/Birds Data/Bird_traits_cleaned.xlsx",
sheet = "AVONET1_BirdLife")
traits_data=traits_data[,-1]
frug_birds <- traits_data[traits_data$Trophic.Niche=='Frugivore',]
#Removed non-measurement related categories from Avonet1_Birdlife data
raw_bird_geog <- read.table("Data/Birds Data/Occurrences_GlobalBirds_TDWG.txt", header=T,sep="")
bird_geog_data <- acast(data = raw_bird_geog,
formula = LEVEL_3_CO ~ SpecName,
fill = 0,
fun.aggregate = length,
value.var = "SpecName")
View(bird_geog_data)
####Species Richness###
Bird_data_BC = data.frame(Initial=c(rowSums(bird_geog_data)))
View(Bird_data_BC)
plant_BC <- data.frame(SpeciesRichness=c(rowSums(fruit_distri_df)))
fruit_distri_df <- data.frame(fruit_distri_df)
plant_BC <- data.frame(SpeciesRichness=c(rowSums(fruit_distri_df)))
fruit_distri_df <- as.data.frame(fruit_distri_df)
fruit_distri_df <- t(fruit_distri_copy)
fruit_distri_df_header <- fruit_distri_df[1,]
colnames(fruit_distri_df) <- fruit_distri_df_header
fruit_distri_df <- fruit_distri_df [-1,]
fruit_distri_df <- as.data.frame(fruit_distri_df)
rowSums(fruit_distri_df)
?rowSums
fruit_distri_df <- t(fruit_distri_copy)
fruit_distri_df_header <- fruit_distri_df[1,]
colnames(fruit_distri_df) <- fruit_distri_df_header
fruit_distri_df <- fruit_distri_df [-1,]
View(fruit_distri_df)
rowSums(fruit_distri_df)
is.numeric(fruit_distri_df)
as.numeric(fruit_distri_df)
fruit_distri_df <- as.numeric(fruit_distri_df)
fruit_distri_df <- t(fruit_distri_copy)
fruit_distri_df_header <- fruit_distri_df[1,]
colnames(fruit_distri_df) <- fruit_distri_df_header
fruit_distri_df <- fruit_distri_df [-1,]
fruit_distri_values <- matrix(as.numeric(fruit_distri_df),ncol = ncol(fruit_distri_df))
View(fruit_distri_df)
View(fruit_distri_df)
rowSums(fruit_distri_df)
fruit_distri_df <- as.data.frame(fruit_distri_df)
fruit_distri_df <- as.data.frame(sapply(fruit_distri_df, as.numeric))
rowSums(fruit_distri_df)
plant_BC <- data.frame(SpeciesRichness=c(rowSums(fruit_distri_df)))
View(plant_BC)
bot_countries <- st_read("Data/lvl3/level3.shp")
plant_BC <- cbind(bot_countries$LEVEL3_COD,plant_BC,bot_countries$geometry)
plot(plant_BC)
plant_BC <- data.frame(SpeciesRichness=c(rowSums(fruit_distri_df)))
plant_BC <- cbind(plant_BC,bot_countries$geometry)
plot(plant_BC)
plant_BC <- st_as_sf(plant_BC)
plot(plant_BC)
###Frugivore species richness###
match_frug <- intersect(frug_birds$Species1,colnames(match_birdtrait_byBC))
match_frug_byBC <- match_birdtrait_byBC[,c(match_frug)]
Bird_data_BC$Frugivore=rowSums(match_frug_byBC)
Bird_data_BC$`Density_Frug` = Bird_data_BC$Frugivore/Bird_data_BC$areas
Bird_data_BC$`Yes data` <- rowSums(match_birdtrait_byBC)
###Data matching###
#proportion of bird with geog data with matching trait data
raw_bird_geog$SpecName = as.factor(raw_bird_geog$SpecName)
match_birdtrait <- semi_join(raw_bird_geog,traits_data,by = c('SpecName'='Species1'))
no_birdtrait <- anti_join(raw_bird_geog,traits_data,by = c('SpecName'='Species1'))
match_birdtrait_byBC <- acast(data=match_birdtrait,
formula = LEVEL_3_CO ~ SpecName,
fun.aggregate = length,
value.var = 'SpecName')
####Species Richness###
Bird_data_BC = data.frame(Initial=c(rowSums(bird_geog_data)))
areas<-st_area(bot_countries)
Bird_data_BC=cbind(Bird_data_BC,areas)
Bird_data_BC$`Yes data` <- rowSums(match_birdtrait_byBC)
Bird_data_BC$Percentage <- Bird_data_BC$`Yes data`/Bird_data_BC$Initial
Bird_data_BC$areacode <- row.names(Bird_data_BC)
Bird_data_BC$geometry <- st_geometry(bot_countries$geometry)
Data_availability <- Bird_data_BC[,c('Percentage','geometry')]
Data_availability_sf <- st_as_sf(Data_availability)
ggplot() +
geom_sf(data = Data_availability_sf, aes(fill = Percentage), color = "white", size = 0.5) +
scale_fill_gradient2(low = "blue",mid = 'purple', high = "yellow",midpoint = 0.75)
###Frugivore species richness###
match_frug <- intersect(frug_birds$Species1,colnames(match_birdtrait_byBC))
match_frug_byBC <- match_birdtrait_byBC[,c(match_frug)]
Bird_data_BC$Frugivore=rowSums(match_frug_byBC)
Bird_data_BC$`Density_Frug` = Bird_data_BC$Frugivore/Bird_data_BC$areas
plot(st_as_sf(Bird_data_BC))
View(Bird_data_BC)
plant_BC <- cbind(Bird_data_BC$Frugivore)
plot(plant_BC)
plant_BC <- data.frame(SpeciesRichness=c(rowSums(fruit_distri_df)))
plant_BC <- cbind(plant_BC,bot_countries$geometry)
plant_BC <- cbind(Bird_data_BC$Frugivore,plant_BC)
plant_BC <- st_as_sf(plant_BC)
plot(plant_BC)
